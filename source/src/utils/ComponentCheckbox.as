package src.utils{	import caurina.transitions.Tweener;	import flash.geom.Point;	import net.fpp.starling.StaticAssetManager;	import starling.display.Button;	import starling.display.Sprite;	import starling.events.Event;	import starling.events.TouchEvent;	import starling.events.TouchPhase;	public class ComponentCheckbox extends Sprite	{		private var _enabledButton:Button;		private var _disabledButton:Button;		private var _backEnabled:Button;		private var _backDisabled:Button;		private var _touchStartPoint:Point;		private var tmpX:Number;		private var _state:Boolean;		private var _forcePaused:Boolean;		private var _firstSet:Boolean = true;		private var _touchStarted:Boolean;		public function ComponentCheckbox( $startState:Boolean = false ):void		{			_state = $startState;			build();			resume();		}		public function build():void		{			addChild( _backEnabled = new Button( StaticAssetManager.instance.getTexture( "checkbox_back_on" ) ) );			_backEnabled.scaleWhenDown = 1;			_backEnabled.name = "back_enabled";			addChild( _backDisabled = new Button( StaticAssetManager.instance.getTexture( "checkbox_back_off" ) ) );			_backDisabled.scaleWhenDown = 1;			_backDisabled.name = "back_disabled";			_backDisabled.visible = false;			addChild( _enabledButton = new Button( StaticAssetManager.instance.getTexture( "checkbox_button_on" ) ) );			_enabledButton.name = "enabled_button";			_enabledButton.scaleWhenDown = 1;			_enabledButton.x = _backEnabled.width - _enabledButton.width;			addChild( _disabledButton = new Button( StaticAssetManager.instance.getTexture( "checkbox_button_off" ) ) );			_disabledButton.name = "disabled_button";			_disabledButton.scaleWhenDown = 1;			_disabledButton.visible = false;			setView();			_firstSet = false;		}		private function setView():void		{			Tweener.removeTweens( _disabledButton );			Tweener.removeTweens( _enabledButton );			if( _state )			{				Tweener.addTween( _disabledButton, {					x: _backEnabled.width - _enabledButton.width,					time: _firstSet ? 0 : .25,					onComplete: forceResume				} );			}			else			{				Tweener.addTween( _enabledButton, {x: 0, time: _firstSet ? 0 : .25, onComplete: forceResume} );			}		}		private function touchHandler( event:TouchEvent ):void		{			if( event.touches[ 0 ].phase == TouchPhase.BEGAN && !_touchStarted )			{				_touchStartPoint = new Point( event.touches[ 0 ].globalX, event.touches[ 0 ].globalY );				_touchStarted = true;				if( _enabledButton.visible )				{					tmpX = _enabledButton.x;				}				else				{					tmpX = _disabledButton.x;				}			}			else if( event.touches[ 0 ].phase == TouchPhase.MOVED )			{				if( _enabledButton.visible )				{					_enabledButton.x = tmpX - ( _touchStartPoint.x - event.touches[ 0 ].globalX );					_enabledButton.x = Math.max( _enabledButton.x, 0 );					_enabledButton.x = Math.min( _enabledButton.x, _backEnabled.width - _enabledButton.width );				}				else				{					_disabledButton.x = tmpX - ( _touchStartPoint.x - event.touches[ 0 ].globalX );					_disabledButton.x = Math.max( _disabledButton.x, 0 );					_disabledButton.x = Math.min( _disabledButton.x, _backEnabled.width - _disabledButton.width );				}			}		}		private function onButtonTriggered( event:Event ):void		{			var button:Button = event.target as Button;			if( button.name == "back_enabled" || button.name == "back_disabled" )			{				_state = !_state;			}			else			{				_state = button.name != "enabled_button";			}			dispatchEvent( new Event( Event.CHANGE ) );			forcePause();			setView();		}		private function forcePause():void		{			_forcePaused = true;			pause();		}		private function forceResume():void		{			_forcePaused = false;			if( _state )			{				_enabledButton.visible = true;				_disabledButton.visible = false;				_enabledButton.x = _disabledButton.x;				_backEnabled.visible = true;				_backDisabled.visible = false;			}			else			{				_enabledButton.visible = false;				_disabledButton.visible = true;				_disabledButton.x = _enabledButton.x;				_backEnabled.visible = false;				_backDisabled.visible = true;			}			resume();		}		public function pause():void		{			_backEnabled.removeEventListener( Event.TRIGGERED, onButtonTriggered );			_enabledButton.removeEventListener( Event.TRIGGERED, onButtonTriggered );			_enabledButton.removeEventListener( TouchEvent.TOUCH, touchHandler );			_backDisabled.removeEventListener( Event.TRIGGERED, onButtonTriggered );			_disabledButton.removeEventListener( Event.TRIGGERED, onButtonTriggered );			_disabledButton.removeEventListener( TouchEvent.TOUCH, touchHandler );		}		public function resume():void		{			if( !_forcePaused )			{				if( _backEnabled.visible )				{					_backEnabled.addEventListener( Event.TRIGGERED, onButtonTriggered );					_enabledButton.addEventListener( Event.TRIGGERED, onButtonTriggered );					_enabledButton.addEventListener( TouchEvent.TOUCH, touchHandler );				}				else				{					_backDisabled.addEventListener( Event.TRIGGERED, onButtonTriggered );					_disabledButton.addEventListener( Event.TRIGGERED, onButtonTriggered );					_disabledButton.addEventListener( TouchEvent.TOUCH, touchHandler );				}			}		}		public function get state():Boolean		{			return _state;		}		public function set state( $state:Boolean ):void		{			if( _state == $state )			{				return;			}			_state = $state;			setView();		}		override public function dispose():void		{			pause();			removeChild( _backEnabled, true );			_backEnabled = null;			removeChild( _backDisabled, true );			_backDisabled = null;			removeChild( _enabledButton, true );			_enabledButton = null;			removeChild( _disabledButton, true );			_disabledButton = null;			super.dispose();		}	}}