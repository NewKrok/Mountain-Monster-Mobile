package src.game{	import net.fpp.common.achievement.AchievementManager;	import net.fpp.common.starling.StaticAssetManager;	import net.fpp.common.util.NumberUtil;	import net.fpp.common.util.TimeUtil;	import rv2.sound.SoundHandler;	import src.assets.Fonts;	import src.assets.Levels;	import src.common.DataManager;	import src.common.TasksManager;	import src.constant.CLeaderBoard;	import src.data.LevelEndVO;	import src.data.LevelResultVO;	import src.game.events.GameGuiEvent;	import starling.display.Button;	import starling.display.Image;	import starling.display.Quad;	import starling.display.Sprite;	import starling.events.Event;	import starling.text.TextField;	import starling.text.TextFormat;	import starling.utils.Align;	public class GameOverPanel extends Sprite	{		private var _coinGuiView:CoinGuiView;		private var _timeGuiView:TimeGuiView;		private var _achievementManager:AchievementManager;		private var _back:Quad;		private var _panelBack:Image;		private var _starView:Image;		private var _panelContainer:Sprite;		private var _restartGameButton:Button;		private var _exitButton:Button;		private var _nextLevelButton:Button;		private var _titleText:TextField;		private var _subTitleText:TextField;		private var _scoreText:TextField;		private var _bestScoreText:TextField;		private var _bestScoreValueText:TextField;		private var _bestTimeText:TextField;		private var _bestTimeValueText:TextField;		private var _newHighscoreText:TextField;		private var _levelEndVO:LevelEndVO;		public function GameOverPanel( leveResultVO:LevelEndVO ):void		{			this._levelEndVO = leveResultVO;			this._achievementManager = TasksManager.getAchievementManagerByWorld( this._levelEndVO.worldID );			this.addEventListener( Event.ADDED_TO_STAGE, this.loaded );		}		private function loaded( event:Event ):void		{			removeEventListener( Event.ADDED_TO_STAGE, loaded );			this._back = new Quad( stage.stageWidth, stage.stageHeight, 0x000000 );			this._back.width = this.stage.stageWidth;			this._back.height = this.stage.stageHeight;			this._back.alpha = .5;			this.addChild( this._back );			addChild( _panelContainer = new Sprite );			_panelContainer.addChild( _panelBack = new Image( StaticAssetManager.instance.getTexture( "panel_background" ) ) );			var titleTextFormat:TextFormat = new TextFormat();			titleTextFormat.font = Fonts.getAachenLightFont().name;			titleTextFormat.size = 20;			titleTextFormat.color = 0xFFFFFF;			_panelContainer.addChild( _titleText = new TextField( _panelBack.width, 46, _levelEndVO.isWon ? 'LEVEL COMPLETED' : 'LEVEL FAILED', titleTextFormat ) );			_titleText.y = 5;			var subTitleTextFormat:TextFormat = new TextFormat();			subTitleTextFormat.font = Fonts.getAachenLightFont().name;			subTitleTextFormat.size = 10;			subTitleTextFormat.color = 0xFFFFFF;			_panelContainer.addChild( _subTitleText = new TextField( _panelBack.width, 25, 'LEVEL PACK ' + ( _levelEndVO.worldID + 1 ) + ' - LEVEL ' + ( _levelEndVO.id + 1 ), subTitleTextFormat ) );			_subTitleText.y = 30;			addChild( _starView = new Image( StaticAssetManager.instance.getTexture( "large_star_" + _levelEndVO.starCount ) ) );			_panelContainer.addChild( _starView );			_starView.x = _panelBack.width / 2 - _starView.width / 2;			_starView.y = 50;			var scoreTextFormat:TextFormat = new TextFormat();			scoreTextFormat.font = Fonts.getAachenLightFont().name;			scoreTextFormat.size = 16;			scoreTextFormat.color = 0xFFFF00;			_panelContainer.addChild( _scoreText = new TextField( _panelBack.width, 30, 'SCORE: ' + NumberUtil.formatNumber( _levelEndVO.score ), scoreTextFormat ) );			_scoreText.autoSize = 'center';			_scoreText.y = 80;			var highScoreTextFormat:TextFormat = new TextFormat();			highScoreTextFormat.font = Fonts.getAachenLightFont().name;			highScoreTextFormat.size = 10;			highScoreTextFormat.color = 0xFFFF00;			highScoreTextFormat.horizontalAlign = Align.RIGHT;			highScoreTextFormat.verticalAlign = Align.CENTER;			_panelContainer.addChild( _newHighscoreText = new TextField( 120, 30, 'NEW HIGHSCORE!', highScoreTextFormat ) );			_newHighscoreText.autoSize = 'right';			_newHighscoreText.x = _panelBack.width - _newHighscoreText.width - 10;			_newHighscoreText.y = 79;			_newHighscoreText.visible = false;			_panelContainer.addChild( _coinGuiView = new CoinGuiView );			_coinGuiView.updateValue( _levelEndVO.collectedCoin, false );			_coinGuiView.x = _panelBack.width / 2 - _coinGuiView.width - 15;			_coinGuiView.y = 110;			_panelContainer.addChild( _timeGuiView = new TimeGuiView );			_timeGuiView.updateValue( _levelEndVO.gameTime, false );			_timeGuiView.x = _panelBack.width / 2 + 15;			_timeGuiView.y = 110;			var bestScoreTextFormat:TextFormat = new TextFormat();			bestScoreTextFormat.font = Fonts.getAachenLightFont().name;			bestScoreTextFormat.size = 10;			bestScoreTextFormat.color = 0xFFFFFF;			bestScoreTextFormat.horizontalAlign = Align.LEFT;			_panelContainer.addChild( _bestScoreText = new TextField( 62, 25, "BEST SCORE:", bestScoreTextFormat ) );			_bestScoreText.x = 15;			_bestScoreText.y = _panelBack.height - _bestScoreText.height - 10;			var levelResult:LevelResultVO = DataManager.getLevelData( _levelEndVO.worldID, _levelEndVO.id );			var bestScore:String = levelResult.isCompleted ? NumberUtil.formatNumber( levelResult.score ) : 'N/A';			var bestScoreValueTextFormat:TextFormat = new TextFormat();			bestScoreValueTextFormat.font = Fonts.getAachenLightFont().name;			bestScoreValueTextFormat.size = 10;			bestScoreValueTextFormat.color = 0xFFFF00;			bestScoreValueTextFormat.horizontalAlign = Align.CENTER;			_panelContainer.addChild( _bestScoreValueText = new TextField( 40, 25, bestScore, bestScoreValueTextFormat ) );			_bestScoreValueText.x = _bestScoreText.x + _bestScoreText.width;			_bestScoreValueText.y = _bestScoreText.y;			var bestTime:String = 'N/A';			if( levelResult.isCompleted )			{				bestTime = TimeUtil.timeStampToFormattedTime( levelResult.gameTime, TimeUtil.TIME_FORMAT_MM_SS_MS );			}			var bestTimeValueTextFormat:TextFormat = new TextFormat();			bestTimeValueTextFormat.font = Fonts.getAachenLightFont().name;			bestTimeValueTextFormat.size = 10;			bestTimeValueTextFormat.color = 0xFFFF00;			bestTimeValueTextFormat.horizontalAlign = Align.CENTER;			_panelContainer.addChild( _bestTimeValueText = new TextField( 50, 25, bestTime, bestTimeValueTextFormat ) );			_bestTimeValueText.x = _panelContainer.width - _bestTimeValueText.width - 15;			_bestTimeValueText.y = _bestScoreText.y;			var bestTimeTextFormat:TextFormat = new TextFormat();			bestTimeTextFormat.font = Fonts.getAachenLightFont().name;			bestTimeTextFormat.size = 10;			bestTimeTextFormat.color = 0xFFFFFF;			bestTimeTextFormat.horizontalAlign = Align.RIGHT;			_panelContainer.addChild( _bestTimeText = new TextField( 60, 25, "BEST TIME:", bestTimeTextFormat ) );			_bestTimeText.x = _bestTimeValueText.x - _bestTimeText.width - 5;			_bestTimeText.y = _bestScoreText.y;			_panelContainer.x = stage.stageWidth / 2 - _panelContainer.width / 2;			_panelContainer.y = stage.stageHeight / 2 - _panelContainer.height / 2 - 40;			var buttonTextFormat:TextFormat = new TextFormat();			buttonTextFormat.font = Fonts.getAachenLightFont().name;			buttonTextFormat.size = 18;			buttonTextFormat.color = 0xFFFFFF;			addChild( _exitButton = new Button( StaticAssetManager.instance.getTexture( "base_button" ), "EXIT" ) );			_exitButton.textFormat = buttonTextFormat;			_exitButton.x = stage.stageWidth / 2 - _exitButton.width - 5;			_exitButton.y = _panelContainer.y + _panelContainer.height + 10;			_exitButton.addEventListener( Event.TRIGGERED, exitRequest );			addChild( _restartGameButton = new Button( StaticAssetManager.instance.getTexture( "base_button" ), "RESTART GAME" ) );			_restartGameButton.textFormat = buttonTextFormat;			_restartGameButton.x = stage.stageWidth / 2 + 5;			_restartGameButton.y = _exitButton.y;			_restartGameButton.addEventListener( Event.TRIGGERED, restartRequest );			var hasNextLevelInLevelPack:Boolean = _levelEndVO.id + 1 < Levels.levels[ _levelEndVO.worldID ].length;			if( _levelEndVO.isWon )			{				var previousTotalScoreInCurrentLevelPack:Number = DataManager.getScoreByWorldID( _levelEndVO.worldID );				DataManager.setLevelData( _levelEndVO.worldID, _levelEndVO.id, true, true, _levelEndVO.score, _levelEndVO.starCount, _levelEndVO.gameTime );				if( hasNextLevelInLevelPack )				{					DataManager.setLevelData( _levelEndVO.worldID, _levelEndVO.id + 1, true, false );				}				var currentTotalScoreInAllLevelPack:Number = DataManager.getScoreByAllWorld();				var currentTotalScoreInCurrentLevelPack:Number = DataManager.getScoreByWorldID( _levelEndVO.worldID );				if( previousTotalScoreInCurrentLevelPack < currentTotalScoreInCurrentLevelPack )				{					_newHighscoreText.visible = true;					if( previousTotalScoreInCurrentLevelPack > 0 )					{						this.checkHighScoreTasks();					}				}				if( _levelEndVO.starCount == 3 )				{					this.checkStarTasks();				}				CONFIG::IS_MOBILE_VERSION {					MountainMonsterIOSMain.gcManager.reportScoreForLeaderboard( CLeaderBoard.LEADERBOARD_NAME, currentTotalScoreInAllLevelPack );					if( _levelEndVO.worldID == 0 )					{						MountainMonsterIOSMain.gcManager.reportScoreForLeaderboard( CLeaderBoard.LEADERBOARD_NAME_LEVEL_PACK_1, currentTotalScoreInCurrentLevelPack );					}					else if( _levelEndVO.worldID == 1 )					{						MountainMonsterIOSMain.gcManager.reportScoreForLeaderboard( CLeaderBoard.LEADERBOARD_NAME_LEVEL_PACK_2, currentTotalScoreInCurrentLevelPack );					}					else if( _levelEndVO.worldID == 2 )					{						MountainMonsterIOSMain.gcManager.reportScoreForLeaderboard( CLeaderBoard.LEADERBOARD_NAME_LEVEL_PACK_3, currentTotalScoreInCurrentLevelPack );					}				}				DataManager.save();			}			if( levelResult.isCompleted && hasNextLevelInLevelPack )			{				addChild( _nextLevelButton = new Button( StaticAssetManager.instance.getTexture( "base_button" ), "NEXT LEVEL" ) );				_nextLevelButton.textFormat = buttonTextFormat;				_nextLevelButton.x = stage.stageWidth / 2 - _nextLevelButton.width / 2;				_nextLevelButton.y = _exitButton.y + _exitButton.height + 5;				_nextLevelButton.addEventListener( Event.TRIGGERED, nextLevelRequest );				_panelContainer.y -= 10;			}			this.checkAdState();		}		private function checkAdState():void		{			if( DataManager.getTotalPlayedGameCount() % 2 == 0 )			{				CONFIG::IS_MOBILE_VERSION {					if( !MountainMonsterIOSMain.AD_BLOCKED )					{						MountainMonsterIOSMain.adManager.addAdMobFullScreenView( "ca-app-pub-7267616582116110/4209530384" );					}				}				trace( 'check ad state...' );			}		}		private function restartRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			disableButtons();			dispatchEvent( new GameGuiEvent( GameGuiEvent.INGAME_RESTART_REQUEST ) );		}		private function exitRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			disableButtons();			dispatchEvent( new GameGuiEvent( GameGuiEvent.GAME_END_REQUEST ) );		}		private function nextLevelRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			disableButtons();			dispatchEvent( new GameGuiEvent( GameGuiEvent.NEXT_LEVEL_REQUEST ) );		}		private function disableButtons():void		{			_restartGameButton.removeEventListener( Event.TRIGGERED, restartRequest );			_exitButton.removeEventListener( Event.TRIGGERED, exitRequest );			if( _nextLevelButton )			{				_nextLevelButton.removeEventListener( Event.TRIGGERED, nextLevelRequest );			}		}		private function checkHighScoreTasks():void		{			switch( this._levelEndVO.worldID )			{				case 0:					this._achievementManager.increaseAchievementCurrentValue( 4 );					break;				case 1:					this._achievementManager.increaseAchievementCurrentValue( 17 );					break;				case 2:					this._achievementManager.increaseAchievementCurrentValue( 6 );					break;			}		}		private function checkStarTasks():void		{			var totalCountOf3StarsLevel:int = DataManager.getTotalCountOf3StarsLevelByWorld( this._levelEndVO.worldID );			switch( this._levelEndVO.worldID )			{				case 0:					this._achievementManager.setAchievementCurrentValue( 8, totalCountOf3StarsLevel );					this._achievementManager.setAchievementCurrentValue( 17, totalCountOf3StarsLevel );					break;				case 1:					this._achievementManager.setAchievementCurrentValue( 8, totalCountOf3StarsLevel );					break;				case 2:					this._achievementManager.setAchievementCurrentValue( 13, totalCountOf3StarsLevel );					break;			}		}		override public function dispose():void		{			_back.removeFromParent( true );			_back = null;			_titleText.removeFromParent( true );			_titleText = null;			_subTitleText.removeFromParent( true );			_subTitleText = null;			_scoreText.removeFromParent( true );			_scoreText = null;			_newHighscoreText.removeFromParent( true );			_newHighscoreText = null;			_starView.removeFromParent( true );			_starView = null;			_coinGuiView.removeFromParent( true );			_coinGuiView = null;			_timeGuiView.removeFromParent( true );			_timeGuiView = null;			disableButtons();			_restartGameButton.removeFromParent( true );			_restartGameButton = null;			_exitButton.removeFromParent( true );			_exitButton = null;			if( _nextLevelButton )			{				_nextLevelButton.removeFromParent( true );				_nextLevelButton = null;			}			_panelContainer.removeFromParent( true );			_panelContainer = null;			super.dispose();		}	}}