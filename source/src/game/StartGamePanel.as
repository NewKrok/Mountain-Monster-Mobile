package src.game{	import net.fpp.starling.StaticAssetManager;	import rv2.sound.SoundHandler;	import rv2.string.StringConverter;		import src.assets.Fonts;	import src.assets.Levels;	import src.assets.RuntimeTextures;	import src.data.DataManager;	import src.data.Level;	import src.data.LevelResultVO;	import src.game.events.GameGuiEvent;		import starling.display.Button;	import starling.display.Image;	import starling.display.Sprite;	import starling.events.Event;	import starling.text.TextField;	import starling.textures.Texture;	import starling.utils.HAlign;	    public class StartGamePanel extends Sprite	{		private var _starViews:Vector.<StartGamePanelStarView> = new Vector.<StartGamePanelStarView>;				private var _back:				Image;		private var _panelBack:			Image;				private var _panelContainer:	Sprite;				private var _startGameButton:	Button;		private var _exitButton:		Button;				private var _titleText:			TextField;		private var _subTitleText:		TextField;		private var _bestScoreText:		TextField;		private var _bestScoreValueText:TextField;		private var _bestTimeText:		TextField;		private var _bestTimeValueText:	TextField;				private var _levelID:			uint;		private var _worldID:			uint;				public function StartGamePanel( levelID:uint, worldID:uint ):void		{			_levelID = levelID;			_worldID = worldID;						addEventListener( Event.ADDED_TO_STAGE, loaded );		}				private function loaded( event:Event ):void		{			removeEventListener( Event.ADDED_TO_STAGE, loaded );						var levelData:Level = Levels.levels[_worldID][_levelID];			var levelResult:LevelResultVO = DataManager.getLevelData( _worldID, _levelID );			this._back = new Image ( RuntimeTextures.DARK_RECTANGLE );			this._back.width = this.stage.stageWidth;			this._back.height = this.stage.stageHeight;			this._back.alpha = .5;			this._back.touchable = false;			this.addChild( this._back );						addChild( _panelContainer = new Sprite );						_panelContainer.addChild( _panelBack = new Image ( StaticAssetManager.instance.getTexture ( "panel_background" ) ) );						_panelContainer.addChild( _titleText = new TextField( _panelBack.width, 46, "LEVEL " + ( _levelID + 1 ) ) );			_titleText.fontSize = 20;			_titleText.fontName = Fonts.getAachenLightFont( ).name;			_titleText.color = 0xFFFFFF;			_titleText.y = 5;			_panelContainer.addChild( _subTitleText = new TextField( _panelBack.width, 25, "LEVEL PACK " + ( _worldID + 1 ) ) );			_subTitleText.fontSize = 10;			_subTitleText.fontName = Fonts.getAachenLightFont( ).name;			_subTitleText.color = 0xFFFFFF;			_subTitleText.y = 30;						for ( var i:int = 0; i < 3; i++ )			{				var starView:StartGamePanelStarView = new StartGamePanelStarView( 3 - i, levelData.starValues[2 - i] );				_panelContainer.addChild( starView );				starView.x = 50;				starView.y = 50 + i * 30;				_starViews.push( starView );			}						_panelContainer.addChild( _bestScoreText = new TextField( 62, 25, "BEST SCORE:" ) );			_bestScoreText.hAlign = HAlign.LEFT;			_bestScoreText.fontSize = 10;			_bestScoreText.fontName = Fonts.getAachenLightFont( ).name;			_bestScoreText.color = 0xFFFFFF;			_bestScoreText.x = 15;			_bestScoreText.y = _panelBack.height - _bestScoreText.height - 10;						var bestScore:String = levelResult.isCompleted ? StringConverter.numberToFString( levelResult.score ) : 'N/A';			_panelContainer.addChild( _bestScoreValueText = new TextField( 50, 25, bestScore ) );			_bestScoreValueText.hAlign = HAlign.CENTER;			_bestScoreValueText.fontSize = 10;			_bestScoreValueText.fontName = Fonts.getAachenLightFont( ).name;			_bestScoreValueText.color = 0xFFFF00;			_bestScoreValueText.x = _bestScoreText.x + _bestScoreText.width;			_bestScoreValueText.y = _bestScoreText.y;			var bestTime:String = levelResult.isCompleted ? StringConverter.timeStampToTime( levelResult.gameTime, { hour: false, millisecond: true } ) : 'N/A';			_panelContainer.addChild( _bestTimeValueText = new TextField( 50, 25, bestTime ) );			_bestTimeValueText.hAlign = HAlign.CENTER;			_bestTimeValueText.fontSize = 10;			_bestTimeValueText.fontName = Fonts.getAachenLightFont( ).name;			_bestTimeValueText.color = 0xFFFF00;			_bestTimeValueText.x = _panelContainer.width - _bestTimeValueText.width - 15;			_bestTimeValueText.y = _bestScoreText.y;						_panelContainer.addChild( _bestTimeText = new TextField( 60, 25, "BEST TIME:" ) );			_bestTimeText.hAlign = HAlign.RIGHT;			_bestTimeText.fontSize = 10;			_bestTimeText.fontName = Fonts.getAachenLightFont( ).name;			_bestTimeText.color = 0xFFFFFF;			_bestTimeText.x = _bestTimeValueText.x - _bestTimeText.width - 5;			_bestTimeText.y = _bestScoreText.y;						_panelContainer.x = stage.stageWidth / 2 - _panelContainer.width / 2;			_panelContainer.y = stage.stageHeight / 2 - _panelContainer.height / 2 - 40;						addChild( _exitButton = new Button( StaticAssetManager.instance.getTexture ( "base_button" ), "EXIT" ) );			_exitButton.fontSize = 18;			_exitButton.fontColor = 0xFFFFFF;			_exitButton.fontName = Fonts.getAachenLightFont ().name;			_exitButton.x = stage.stageWidth / 2 - _exitButton.width - 5;			_exitButton.y = _panelContainer.y + _panelContainer.height + 10;			_exitButton.addEventListener( Event.TRIGGERED, exitRequest );						addChild( _startGameButton = new Button( StaticAssetManager.instance.getTexture ( "base_button" ), "START GAME" ) );			_startGameButton.fontSize = 18;			_startGameButton.fontColor = 0xFFFFFF;			_startGameButton.fontName = Fonts.getAachenLightFont ().name;			_startGameButton.x = stage.stageWidth / 2 + 5;			_startGameButton.y = _exitButton.y;			_startGameButton.addEventListener( Event.TRIGGERED, resumeRequest );		}				private function resumeRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			disableButtons();			dispatchEvent( new GameGuiEvent ( GameGuiEvent.RESUME_REQUEST ) );		}		private function exitRequest( event:Event ):void		{			SoundHandler.play( 'SND_BUTTON' );			disableButtons();			dispatchEvent( new GameGuiEvent ( GameGuiEvent.GAME_END_REQUEST ) );		}		private function disableButtons():void		{			_startGameButton.removeEventListener( Event.TRIGGERED, resumeRequest );			_exitButton.removeEventListener( Event.TRIGGERED, exitRequest );		}				override public function dispose( ):void		{				_back.removeFromParent( true );			_back = null;						_titleText.removeFromParent( true );			_titleText = null;			_subTitleText.removeFromParent( true );			_subTitleText = null;						for ( var i:int = 0; i < _starViews.length; i++ )			{				_starViews[i].removeFromParent( true );				_starViews[i] = null;			}			_starViews.length = 0;			_starViews = null;			disableButtons();			_startGameButton.removeFromParent( true );			_startGameButton = null;			_exitButton.removeFromParent( true );			_exitButton = null;						_panelContainer.removeFromParent( true );			_panelContainer = null;						super.dispose ( );		}		}}