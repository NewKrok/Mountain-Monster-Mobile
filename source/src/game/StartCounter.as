package src.game{	import caurina.transitions.Tweener;	import net.fpp.common.starling.StaticAssetManager;	import rv2.sound.SoundHandler;	import starling.display.Image;	import starling.display.Sprite;	import starling.events.Event;	public class StartCounter extends Sprite	{		protected var _imageContainer:Sprite;		protected var _counterImages:Vector.<Image> = new Vector.<Image>;		protected var _onCompleteCallback:Function;		protected var _removeCallback:Function;		protected var _animationIndex:int = 0;		public function StartCounter( onCompleteCallback:Function, removeCallback:Function ):void		{			addEventListener( Event.ADDED_TO_STAGE, loaded );			_onCompleteCallback = onCompleteCallback;			_removeCallback = removeCallback;		}		private function loaded( event:Event ):void		{			removeEventListener( Event.ADDED_TO_STAGE, loaded );			addChild( _imageContainer = new Sprite );			for( var i:int = 0; i < 3; i++ )			{				var counterImage:Image = new Image( StaticAssetManager.instance.getTexture( "counter_" + ( 3 - i ) ) );				_counterImages.push( counterImage );				_imageContainer.addChild( counterImage );				counterImage.x = _imageContainer.width / 2 - counterImage.width / 2;				counterImage.y = i * counterImage.height;				counterImage.alpha = 0;			}			_imageContainer.x = stage.stageWidth / 2 - _imageContainer.width / 2;			_imageContainer.y = stage.stageHeight / 2;			startAnimation();		}		private function startAnimation():void		{			if( _animationIndex > 0 )			{				Tweener.addTween( _counterImages[ _animationIndex - 1 ], {time: .4, alpha: 0} );			}			if( _animationIndex < _counterImages.length )			{				Tweener.addTween( _counterImages[ _animationIndex ], {time: .4, alpha: 1} );				Tweener.addTween( _imageContainer, {time: .4, y: _imageContainer.y - _counterImages[ 0 ].height} );			}			if( _animationIndex < _counterImages.length )			{				SoundHandler.play( 'SND_COUNTER_' + ( _animationIndex + 1 ) );				Tweener.addTween( this, {time: .6, onComplete: startAnimation} );				if( _animationIndex + 1 == _counterImages.length )				{					_onCompleteCallback.call();				}			}			else			{				Tweener.addTween( _removeCallback, {time: .4, onComplete: _removeCallback} );			}			_animationIndex++;		}		override public function dispose():void		{			Tweener.removeTweens( this );			for( var i:int = 0; i < 3; i++ )			{				Tweener.removeTweens( _counterImages[ i ] );				_counterImages[ i ].removeFromParent( true );				_counterImages[ i ] = null;			}			_counterImages.length = 0;			_counterImages = null;			_imageContainer.removeFromParent( true );			_imageContainer = null;			super.dispose();		}	}}